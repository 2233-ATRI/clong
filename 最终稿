#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <sys/stat.h>
#include <unistd.h>
#include <sys/types.h>
#include <linux/limits.h>
#include <dirent.h>
#include <grp.h>
#include <pwd.h>
#include <errno.h>
#include <signal.h>
#define PARAM_WQH 0
#define PARAM_A 1	//a
#define PARAM_L 2	//l
#define PARAM_I 4	//i
#define PARAM_R 8	//r
#define PARAM_T 16	//t
#define PARAM 32 //R
#define PARAM_S 64	//参数s
/*这里利用二进制进行编写可以更方便对后续出现的多种组合进行改写,*/

#define MAXROWLEN 100 //每行所用最大格数
/*如果想要获得足够正常的文字信息，必须要将这个长度设置的足够大，
因为在这个过程中可能会有缓冲区的超出，在这个过程中最好将其内容扩大到一定程度*/
int g_maxlen; //最长文件名长度
int g_leave_len = MAXROWLEN;
int total = 0; //文件的大小总和
int aq = 0;	   //每行已输出文件名的个数，用来判断是否换行
int az = 2;	   //一行输出文件名的个数

void display_attribute(struct stat buf, char *name, int filecolor)
{
	char colorname[NAME_MAX + 30];
	char buf_time[32];
	struct passwd *psd;
	struct group *grp;
	if (S_ISLNK(buf.st_mode))
	{
		printf("l");
	}
	else if (S_ISREG(buf.st_mode))
	{
		printf("-");
	}
	else if (S_ISDIR(buf.st_mode))
	{
		printf("d");
	}
	else if (S_ISCHR(buf.st_mode))
	{
		printf("c");
	}
	else if (S_ISBLK(buf.st_mode))
	{
		printf("b");
	}
	else if (S_ISFIFO(buf.st_mode))
	{
		printf("f");
	}
	else if (S_ISSOCK(buf.st_mode))
	{
		printf("s");
	}

	//拥有者权限
	if (buf.st_mode & S_IRUSR)
		printf("r");
	else
		printf("-");
	if (buf.st_mode & S_IWUSR)
		printf("w");
	else
		printf("-");

	if (buf.st_mode & S_IXUSR)
	{
		printf("x");
	}
	else
		printf("-");

	//组权限
	if (buf.st_mode & S_IRGRP)
		printf("r");
	else
		printf("-");

	if (buf.st_mode & S_IWGRP)
		printf("w");
	else
		printf("-");

	if (buf.st_mode & S_IXGRP)
	{
		printf("x");
	}
	else
		printf("-");

	//其他用户权限
	if (buf.st_mode & S_IROTH)
		printf("r");
	else
		printf("-");

	if (buf.st_mode & S_IWOTH)
		printf("w");
	else
		printf("-");

	if (buf.st_mode & S_IXOTH)
	{
		printf("x");
	}
	else
		printf("-");

	printf("\t");
	//通过用户和组id得到用户的信息和其所在组的信息
	psd = getpwuid(buf.st_uid);
	grp = getgrgid(buf.st_gid);

	printf("%2d ", buf.st_nlink); //打印文件的硬链接数
	printf("%-5s", psd->pw_name); //打印用户的名字
	printf("%-5s", grp->gr_name); //打印用户组的名字

	printf("%6d", buf.st_size);				//打印文件大小
	strcpy(buf_time, ctime(&buf.st_mtime)); //把时间转换成普通表示格式

	buf_time[strlen(buf_time) - 1] = '\0'; //去掉换行符
	printf("  %s", buf_time);			   //输出时间
	sprintf(colorname, "\033[%dm%s\033[0m", filecolor, name);
	printf(" %-s\n", colorname);
}

void my_err(const char *err_string, int line)
{
	fprintf(stderr, "line:%d ", line);
	perror(err_string);
	exit(1);
}

void display_single(char *name, int filecolor)
{
	char colorname[NAME_MAX + 30];
	int i, len, j = 0;
	len = strlen(name);
	for (i = 0; i < len; i++)
	{
		if (name[i] < 0)
		{
			j++;
		}
	}
	len = len - j / 3;
	// printf("%d",len);
	if (len < 40)
	{
		len = 40 - len;
	}
	else
	{
		printf("\n");
	}

	sprintf(colorname, "\033[%dm%s\033[0m", filecolor, name);
	printf("%-s", colorname);
	for (i = 0; i < len + 5; i++)
	{
		printf(" ");
	}
	g_leave_len = g_leave_len - 45;
	if (g_leave_len < 45)
	{
		printf("\n");
		g_leave_len = MAXROWLEN;
	}
}

void display_wqh(struct stat buf, char *name, int filecolor)
{
	char colorname[NAME_MAX + 30];
	int i, len, j = 0;
	aq++;
	len = strlen(name);
	for (i = 0; i < len; i++)
	{
		if (name[i] < 0)
		{
			j++;
		}
	}
	len = len - j / 3;
	if (len < 40)
	{
		len = 40 - len;
	}
	else
	{
		printf("\n");
	}
	printf("%d ", buf.st_ino);
	sprintf(colorname, "\033[%dm%s\033[0m", filecolor, name);
	printf(" %-s", colorname);
	//输出少于要求，补够空格
	for (i = 0; i < len + 5; i++)
		printf(" ");
	g_leave_len = g_leave_len - 45;
	if (g_leave_len < 45)
	{
		printf("\n");
		g_leave_len = MAXROWLEN;
	}
}

void display(int flag, char *pathname)
{
	int filecolor = 37;
	int i, j;
	struct stat buf; //文件信息buf
	char name[NAME_MAX + 1];
	for (i = 0, j = 0; i < strlen(pathname); i++)
	{
		if (pathname[i] == '/')
		{
			j = 0;
			continue;
		}
		name[j++] = pathname[i];
	}
	name[j] = '\0';

	//文件名颜色
	if (lstat(pathname, &buf) == -1)
	{
		printf("%s无法打开\n", pathname);
		return;
	}
	if (S_ISLNK(buf.st_mode))
	{
	}
	else if (S_ISREG(buf.st_mode))
	{
	}
	else if (S_ISDIR(buf.st_mode))
	{
		filecolor = 34;
	}
	else if (S_ISCHR(buf.st_mode))
	{
		filecolor = 33;
	}
	else if (S_ISBLK(buf.st_mode))
	{
		filecolor = 33;
	}
	else if (S_ISFIFO(buf.st_mode))
	{
	}
	else if (S_ISSOCK(buf.st_mode))
	{
	}

	if (filecolor == 37 &&
		((buf.st_mode & S_IXUSR) ||
		 (buf.st_mode & S_IXGRP) ||
		 (buf.st_mode & S_IXOTH)))
	{
		filecolor = 32;
	}

	switch (flag)
	{
	case PARAM_WQH:
		if (name[0] != '.')
		{
			display_single(name, filecolor);
		}
		break;

	case PARAM_I:
		if (name[0] != '.')
		{
			display_wqh(buf, name, filecolor);
		}
		break;

	case PARAM_S:
		if (name[0] != '.')
		{
			printf("%2d  ", buf.st_blocks / 2);
			display_single(name, filecolor);
		}
		break;

	case PARAM_A:
		display_single(name, filecolor);
		break;

	case PARAM_L:
		if (name[0] != '.')
		{
			display_attribute(buf, name, filecolor);
		}
		break;

	case PARAM_A + PARAM_L:
		display_attribute(buf, name, filecolor);
		break;

	case PARAM_A + PARAM_I:
		display_wqh(buf, name, filecolor);
		break;

	case PARAM_A + PARAM_S:
		printf("%2d  ", buf.st_blocks / 2);
		display_single(name, filecolor);
		break;

	case PARAM_L + PARAM_S:
		if (name[0] != '.')
		{
			printf("%d  ", buf.st_blocks / 2);
			display_attribute(buf, name, filecolor);
		}
		break;

	case PARAM_L + PARAM_I:
		if (name[0] != '.')
		{
			printf("%d ", buf.st_ino);
			display_attribute(buf, name, filecolor);
		}
		break;

	case PARAM_I + PARAM_S:
		if (name[0] != '.')
		{
			printf("%2d  ", buf.st_ino);
			printf("%2d  ", buf.st_blocks / 2);
			display_single(name, filecolor);
		}
		break;

	case PARAM_A + PARAM_L + PARAM_S:
		printf("%d  ", buf.st_blocks / 2);
		display_attribute(buf, name, filecolor);

		break;

	case PARAM_A + PARAM_I + PARAM_S:
		printf("%d  ", buf.st_ino);
		printf("%2d  ", buf.st_blocks / 2);
		display_single(name, filecolor);
		break;

	case PARAM_L + PARAM_I + PARAM_S:
		if (name[0] != '.')
		{
			printf("%d\t", buf.st_ino);
			printf("%d\t", buf.st_blocks / 2);
			display_attribute(buf, name, filecolor);
		}
		break;

	case PARAM_A + PARAM_L + PARAM_I:
		printf("%d ", buf.st_ino);
		display_attribute(buf, name, filecolor);
		break;

	case PARAM_A + PARAM_I + PARAM_L + PARAM_S:
		printf("%d  ", buf.st_ino);
		printf("%d  ", buf.st_blocks / 2);
		display_attribute(buf, name, filecolor);
		break;

	default:
		break;
	}
}

void display_dir(int flag_param, char *path)
{
	DIR *dir;
	long t;
	int count = 0;
	int i, j, len;
	struct dirent *ptr;
	int flag_param_temp;
	struct stat buf;
	struct stat name;
	char temp[PATH_MAX + 10];
	flag_param_temp = flag_param;
	dir = opendir(path);

	if (dir == NULL)
	{
		printf("%s:无法打开\n", path);
		return 0;
	}
	while ((ptr = readdir(dir)) != NULL)
	{
		int a = 0; //用来统计汉字的个数，个数 = a/3
		int b = 0; //用来统计非汉字的个数 b
		for (i = 0; i < strlen(ptr->d_name); i++)
		{
			if (ptr->d_name[i] < 0)
			{
				a++;
			}
			else
			{
				b++;
			}
		}
		len = a / 3 * 2 + b;
		if (g_maxlen < len)
		{
			g_maxlen = len;
		}
		count++; //文件
	}

	az = g_leave_len / (g_maxlen + 15);
	if (g_maxlen > 40)
	{
		az = 1;
	}

	closedir(dir);
	char **filename = (char **)malloc(sizeof(char *) * count);
	long **filetime = (long **)malloc(sizeof(long *) * count);
	len = strlen(path);
	dir = opendir(path);
	//得到该目录下的所有文件的路径
	for (i = 0; i < count; i++)
	{
		filename[i] = (char *)malloc(sizeof(char) * 1000);
		ptr = readdir(dir);
		if (ptr == NULL)
		{
			my_err("oppendir", __LINE__);
		}
		strncpy(filename[i], path, len);
		filename[i][len] = '\0';
		strcat(filename[i], ptr->d_name);
		filename[i][len + strlen(ptr->d_name)] = '\0';
	}

	closedir(dir);

	//插入排序
	if (flag_param & PARAM_T) //根据时间排序
	{
		flag_param -= PARAM_T;
		for (i = 0; i < count; i++)
		{
			filetime[i] = (long *)malloc(sizeof(long));
			stat(filename[i], &buf);
			filetime[i][0] = buf.st_mtime;
		}

		for (i = 0; i < count; i++)
		{
			for (j = i; j < count; j++)
			{
				if (filetime[i][0] < filetime[j][0])
				{
					t = filetime[i][0];
					filetime[i][0] = filetime[j][0];
					filetime[j][0] = t;
					strcpy(temp, filename[i]);
					strcpy(filename[i], filename[j]);
					strcpy(filename[j], temp);
				}
			}
		}
	}
	else if (flag_param & PARAM_R) //根据名字排序
	{
		for (i = 0; i < count; i++)
		{
			for (j = i; j < count; j++)
			{
				if (strcmp(filename[i], filename[j]) > 0)
				{
					strcpy(temp, filename[i]);
					strcpy(filename[i], filename[j]);
					strcpy(filename[j], temp);
				}
			}
		}
	}

	//计算总用量total
	if (flag_param & PARAM_A)
	{
		for (i = 0; i < count; i++)
		{
			stat(filename[i], &name);
			total = total + name.st_blocks / 2;
		}
	}
	else
	{
		for (i = 0; i < count; i++)
		{
			stat(filename[i], &name);
			if (filename[i][2] != '.')
			{
				total = total + name.st_blocks / 2;
			}
		}
	}

	if (flag_param & PARAM_L)
	{
		printf("总用量： %d\n", total);
	}

	//输出文件
	if (flag_param & PARAM_R)
	{
		flag_param -= PARAM_R;
		if (flag_param & PARAM_S)
		{
			if (flag_param & PARAM_A)
			{
				for (i = 0; i < count; i++)
				{
					stat(filename[i], &name);
					total = total + name.st_blocks / 2;
				}
			}
			else
			{
				for (i = 0; i < count; i++)
				{
					if (filename[i][2] != '.')
					{
						stat(filename[i], &name);
						total = total + name.st_blocks / 2;
					}
				}
			}
			printf("总用量: %d\n", total);
		}
		if (flag_param & PARAM) //递归输出
		{
			flag_param -= PARAM;
			for (i = count - 1; i >= 0; i--)
			{
				lstat(filename[i], &buf);
				if (S_ISDIR(buf.st_mode))
				{
					len = strlen(filename[i]);
					if (filename[i][len - 1] == '.' && filename[i][len - 2] == '/' || filename[i][len - 1] == '.' && filename[i][len - 2] == '.' &&
																						  filename[i][len - 3] == '/')
					{
						continue;
					}
					if (!(flag_param & PARAM_A))
					{
						if (filename[i][2] == '.')
							continue;
					}
					printf("\n\n%s :\n", filename[i]);
					len = strlen(filename[i]);
					filename[i][len] = '/';
					filename[i][len + 1] = '\0';
					display_dir(flag_param, path);
				}
				else
				{
					display(flag_param, filename[i]);
				}
			}
		}
		else
		{
			for (i = count - 1; i >= 0; i--)
			{
				display(flag_param, filename[i]);
			}
		}
	}
	else
	{
		if (flag_param & PARAM_S)
		{
			if (flag_param & PARAM_A)
			{
				for (i = 0; i < count; i++)
				{
					stat(filename[i], &name);
					total = total + name.st_blocks / 2;
				}
			}
			else
			{
				for (i = 0; i < count; i++)
				{
					stat(filename[i], &name);
					if (filename[i][2] != '.')
					{
						total = total + name.st_blocks / 2;
					}
				}
			}
			printf(" %d\n", total);
		}
		if (flag_param & PARAM)
		{
			flag_param -= PARAM;
			for (i = 0; i < count; i++)
			{
				lstat(filename[i], &buf);
				if (S_ISDIR(buf.st_mode))
				{
					len = strlen(filename[i]);
					if (filename[i][len - 1] == '.' && filename[i][len - 2] == '/' || filename[i][len - 1] == '.' && filename[i][len - 2] == '.' &&
																						  filename[i][len - 3] == '/')
						continue;
					if (!(flag_param & PARAM_A))
					{
						if (filename[i][2] == '.')
							continue;
					}

					printf("\n\n%s :\n", filename[i]);
					len = strlen(filename[i]);
					filename[i][len] = '/';
					filename[i][len + 1] = '\0';
					display_dir(flag_param_temp, filename[i]);
				}
				else
					display(flag_param, filename[i]);
			}
		}
		else
		{
			for (i = 0; i < count; i++)
			{
				display(flag_param, filename[i]);
			}
		}
		if ((flag_param & PARAM_L) == 0)
		{
			printf("\n");
		}
	}
}

int main(int argc, char *argv[])
{
	int i, j=0, k, num=0;
	char path[PATH_MAX + 1];
	char param[64];
	int flag_param = PARAM_WQH;
	struct stat buf;
	signal(SIGINT, sigaddset);

	for (i = 1; i < argc; i++)
	{
		if (argv[i][0] == '-')
		{
			for (k = 1; k < strlen(argv[i]); j++, k++)
			{
				param[j] = argv[i][k];
			}
			num++;
		}
	}
	for (i = 0; i < j; i++)
	{
		if (param[i] == 'a')
		{
			flag_param |= PARAM_A;
		}
		else if (param[i] == 'l')
		{
			flag_param |= PARAM_L;
		}
		else if (param[i] == 'R')
		{
			flag_param |= PARAM;
		}
		else if (param[i] == 'r')
		{
			flag_param |= PARAM_R;
		}
		else if (param[i] == 't')
		{
			flag_param |= PARAM_T;
		}
		else if (param[i] == 'i')
		{
			flag_param |= PARAM_I;
		}
		else if (param[i] == 's')
		{
			flag_param |= PARAM_S;
		}
		else
		{
			printf("ls:不适用的选项 -- %c", param[i]);
			exit(1);
		}
	}
	if (num + 1 == argc)
	{
		strcpy(path, "./");
		path[2] = '\0';
		display_dir(flag_param, path);
		return 0;
	}
	i = 1;
	 while (i < argc);
	{
		if (argv[i][0] == '-')
		{
			i++;
		}
		else
		{
			strcpy(path, argv[i]);
			if (stat(path, &buf) == -1)
				my_err("stat", __LINE__);
			if (S_ISDIR(buf.st_mode))
			{
				if (path[strlen(argv[i]) - 1] != '/')
				{
					path[strlen(argv[i])] = '/';
					path[strlen(argv[i]) + 1] = '\0';
				}
				else
					path[strlen(argv[i])] = '\0';

				display_dir(flag_param, path); //按照目录输出
				i++;
			}
			else
			{
				//按照文件输出
				display(flag_param, path);
				i++;
			}
		}
	}
	return 0;
}
